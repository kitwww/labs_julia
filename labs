18.1.1
x=parse(Float64,readline())
y=parse(Float64,readline())
if (y<=0.5*x+1 || y<=0.5*x) && x<=2 && x>=-2 && y>=0
  print("Принадлежит")
else
  print("нет")
end

18.1.2 задача 1
a=readline()
global pros=1
for i in a
  global pros*=parse(Int64,i)
end
print(pros)

2 задача 
global b=parse(Int64,readline())
global pros=1
while b>0
    global b
    global pros*=b%10
    b=b÷10
end
print(pros)

18.2.1
#создаём массив из 40 рандомных цифр
arr = rand(0:9, 40)
#выводим рандомный массив
#создём словарь из цифр массива и приравниваем их 0
dict = Dict(arr[i]=>0 for i in 1:40)
#считаем количество цифр и записываем их в словарь
for i in arr
    dict[i] += 1
end
#сортируем словарь так чтобы в ответе получить максимальная цифра с максимальных числом повторений
dict = sort(collect(dict), rev=true)
dict = sort(collect(dict), by=x->x[2], rev=true)
println("Исходный массив: ")
println(arr)
println("Максимальная цифра с макисимальным числом повторений: ", dict[1])
18.2.2
#создаю матрицу из символов аски таблицы
arr = [[Char(192 + j * 10 + i) for i in 0:8] for j in 0:8]
println("Исходная матрица: ")
for i in arr
    println(i)
end
println("Гланая и побочная диагонаяль матрицы. Побочная диагональ расположена вертикальна, а главная не изменила своего положения:")
#проходим по этой матрицы
for i in 1:9
    for j in 1:9 
        if i == j #выводим главную диагональ
            print(arr[i][j])
        elseif j == 5 #выводим побочную диагональ
            print(arr[i][10 - i])
        else #выводим пробела
            print(" ")
        end
    end
    #переносим строку
    println()
end
18.2.3
#Вводим строку, в которой больше 3 слов, слова разделены запятой с пробелом, в конце точка.
text = readline()
println("Исходная строка: ")
println(text)
#Преобразуем строку в массив слов 
text = split(text[1:end - 1], ", ")
#создаём массив, в который мы будем записывать нужные нам элементы
result = []
for i in 1:length(text)
    #записываем нужные нам элементы
    if i % 2 == 0 && length(text[i]) > 3
        push!(result, text[i])
    end
end
if length(result) == 0 #проверяем есть ли нужные нам слова
    println("Таких слов нету.")
else
    println("Получившаяся строка: ")
    for i in 1:length(result) #красиво выводим строку с нужными словами
        if i != length(result)
            print(result[i], ", ")
        else
            print(result[i], ".")
        end
    end
end


18.3.1
#Скачиваем нужные нам пакет
#using Pkgl; Pkg.add("Iterators")
module MyModule
#путь к нашему модулю
include("nazvanie_moduli.jl")
#используем наш модуль и модуль тестов
using .SamModule
#используем скаченный пакет для того чтобы рассматреть каждую тройку отрезков
using IterTools, Test
#считываем количество отрезков
n = parse(Int8, readline())
#генирируем эти отрезки и перебираем каждое подмножестко размера 3(3 стороны треугольника) 
d = subsets(rand(1:10, n), 3)
#записываем результат
result = triangle(d)
#выводим результат
output(result)
@testset "MyTest" begin
    @test triangle([[3, 4, 5]]) == [[3.0, 4.0, 5.0, 6.0]]
    @test triangle([[9, 6, 9], [9, 6, 3], [9, 9, 3], [6, 9, 3]]) == [[9.0, 6.0, 9.0, 25.45584412271571], [9.0, 9.0, 3.0, 13.311179511974137]]
end
end

module SamModule
#экспортируем нужные нам методы
export triangle, output

#площадь треугольника
function square(a, b, c)
    p = (a + b + c) / 2
    s = sqrt(p*(p - a)*(p - b)*(p - c))
    return s
end
#проверка того что из отрезка может получится треугольник и запись площади в массив результатов 
function triangle(arr)
    result = []
    for (a, b , c) in arr
        if a + b > c && a + c > b && b + c > a
            push!(result, [a, b, c, square(a, b, c)])
        end
    end
    return result
end
#вывод резуль
function output(k)
    for i in k
        println("Площадь треугольника, состоящего из тройки отрезков $(i[1:3]), равна $(i[4])")
    end
end
end


18.4.1
module MyModule
#Путь к нашему модулю
include("modul.jl")
#Используем модуль с нашими функциями
using .Meow
#Используем пакет тестов
using Test
#Считваем с консоли год издания книги
print("Введите год издания книги: ")
n = parse(Int16, readline())
#Считываем данны их файла F.txt
text = readfile("F.txt")
#Отбираем нжуные нам данные по году издания книги
result_book = book(text, n)
#Записываем отобранные данные в файл G.txt
writefile("G.txt", result_book)
#Выводим эти файлы в консоль
println("Содержимое фала F.txt")
output("F.txt")
println()
println("Содержимое фала G.txt")
output("G.txt")
@testset "MyTest" begin
    text = ["Капитанская дочка; А.С. Пушкин; 1836", "Повести Белкина; А.С. Пушкин; 1830", "Скупой рыцарь; А.С. Пушкин; 1830", "Пир во время чумы; А.С. Пушкин; 1830", "Ревизор; Н.В. Гоголь; 1836"]
    @test book(text, 1830) == ["Повести Белкина; А.С. Пушкин; 1830", "Скупой рыцарь; А.С. Пушкин; 1830", "Пир во время чумы; А.С. Пушкин; 1830"]
    @test book(text, 1836) == ["Капитанская дочка; А.С. Пушкин; 1836", "Ревизор; Н.В. Гоголь; 1836"]
end
end


module Meow

export readfile, writefile, book, output
#Чтение файла
function readfile(name)
    open(name) do f
        text = readlines(f)
        return text
    end
end
#Запись в файл
function writefile(name, text)
    open(name, "w") do f
        for i in text
            write(f, i, "\n")
        end
    end
end
#Отбор нжуных нам данных по году издания книги
function book(text, year)
    result = []
    for i in text
        if parse(Int16, split(i, "; ")[3]) == year
            push!(result, i)
        end
    end
    return result
end
#Вывод содержимого файла
function output(name)
    open(name) do f
        for i in readlines(f)
            println(i)
        end
    end
end
end
